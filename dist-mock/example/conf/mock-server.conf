
pushsphere {
    mock {
        httpPort = 8080
        httpsPort = 8443
        requestTimeout = 1000

        serverTls {
            keyStore = "./tls.p12"
            password = "secret"
        }

        clientAuth {
            enabled = true
            # Optional. If not specified, trusts all X.509 certificates without any verification.
            certification = "./client.crt.pem"
        }

        service {
            mappings = [
                {
                    delayMillis = 0
                    request {
                        method = "GET"
                        # Refer to https://armeria.dev/docs/server-basics#path-patterns for more details.
                        pathPattern = "/internal/health"
                    }
                    response {
                        status = 200
                        headers = {
                            "Content-Type" = "application/json"
                        }
                        body = "{ \"healthy\": \"true\" }"
                    },
                },
                # Mocking the APNs API
                {
                    delayMillis = 100
                    request {
                        method = "POST"
                        pathPattern = "/3/device/{id}"
                    }
                    response {
                        status = 200
                        headers = {
                            "apns-id" = "1"
                        }
                    }
                },
                # Mocking the Google OAuth API
                {
                    delayMillis = 100
                    request {
                        method = "POST"
                        pathPattern = "/token"
                    }
                    response {
                        status = 200
                        headers = {
                            "Content-Type" = "application/json"
                        }
                        body = """
                        {
                           "access_token":"ya29.c.c0AY_VpZhTv0-inwQlshPjWSZKY9CILQlTFfE0JtVeSoqepkLnZKvO9yRRXdQ3xU58PVETIz3_b8QcTJ8POTlU2k36AGYiJA7QLFsxYfGQBnER0F5b9_4wmLWzypiJK2PxzCBndJVQMZ74cNXQdxQQwocXNgBveX594TmIKPQIUAMYJqcmBkAFBaKtCwIovVvuMA5iALpCTieVSClTkohvrHrRJn4MZQYu9aBn7AX0BF36B33j8Iv5TBVVclP6SJ7fkw8wlp0Ud7TJkyo4sFXGHab4dGfCRDN7agtgWSCDX0x-oetZd7kWg0d_jDbRBmXJMDw84e05-lQ-FtBQz_-UIWY7JB86z8upC92L41kGdO3Rp-pgbIUYGaVEL385Aksh5zF8irlm0s_xhSBpgmczWihjlf4Jk9f2UnSeQFqrSpuQZmWlyBOJ5FQp7yuFf37S90-cgZo9V6vhY6RMeippzoBQuJ3wZh_t8w0WSs5U5m3Z5juws9-8doBVYtnhrVYBJrQdpkOyhjXz0_B9nI0MJqO27ZMYzMVUXo5epuUs2RpgwvpBeFfd8qfvyr5_vfV9lVzaXrBu3vB-BWMpFqhYsb21Y7jIirjBQgpW7wOS6Sv-4Sblh4qmpFnUhpI2dpZblamdppcpQBbOx8mpgge8Wrhk49JQrv5dv_r1gj9u0s55hQkVhVe2sRp0Jg5q0vizekuXI5BhMoF0gb5eama2gJk-xaoSI1OVMbgqa3Qhsbtw6ZF3zxJ7XXw2r4vFWualgyfSkWOnQX41eFwgWQ73qYypZInpi1Wy0muVr_ZpcdRu0y6vZ7tJ1l1W1u8vRU_nl-6Wm7vX14ZfetMiOM8JnbvtfcnO433eSOhn0ilnpk-b3o22YQ_iJM1FZntrQ46Sfs5ttSIYtYvpe46bhX4IOsazUJ-u2oaBJeS3WQrJWxRY24SpS12c5rmeMeO6lFXM5Iek_69kJyO3MlS6QmmsY5kW76iqmUxWQSq9Quqzykz10Vmr6rdyxlv",
                           "expires_in":3599,
                           "token_type":"Bearer"
                        }
                        """
                    }
                },
                # Mocking the FCM API
                {
                    delayMillis = 100
                    request {
                        method = "POST"
                        pathPattern = "regex:^/v1/projects/.*/messages:send$"
                    }
                    response {
                        status = 200
                        headers = {
                            "Content-Type" = "application/json"
                        }
                        body = "{ \"name\": \"mockMessageId\" }"
                    }
                }
            ]
        }
    }
}
